/*
 * This C++ program was automatically generated by Genesys 220517 (gowndictator)
 * For your own safety, please review this file before compiling and running it.
 */

#include "Smart_InventoryAndHoldingCosts.h"

#include "../../../../kernel/simulator/Simulator.h"
#include "../../../../plugins/components/Create.h"
#include "../../../../plugins/components/Dispose.h"
#include "../../../../plugins/components/DummyComponent.h"
#include "../../../../plugins/components/Assign.h"
#include "../../../../plugins/components/Process.h"
#include "../../../../plugins/components/QueueableItem.h"
#include "../../../../plugins/components/Seize.h"
#include "../../../../plugins/components/Delay.h"
#include "../../../../plugins/components/Release.h"
#include "../../../../plugins/data/Queue.h"
#include "../../../../plugins/data/Resource.h"
#include "../../../../plugins/data/Variable.h"
#include "../../../TraitsApp.h"

Smart_InventoryAndHoldingCosts::Smart_InventoryAndHoldingCosts() {
}

int Smart_InventoryAndHoldingCosts::main(int argc, char** argv) {
	Simulator* genesys = new Simulator();
	genesys->getTracer()->setTraceLevel(TraitsApp<GenesysApplication_if>::traceLevel);
	setDefaultTraceHandlers(genesys->getTracer());
	PluginManager* plugins = genesys->getPlugins();
	plugins->autoInsertPlugins("autoloadplugins.txt");
	Model* model = genesys->getModels()->newModel();
	// create model

        // Initialize resources
        Resource* Resource_1 = plugins->newInstance<Resource>(model, "Resource 1");
        Resource_1->setCapacity(1);
        Resource_1->setCostBusyTimeUnit(0.0);
        Resource_1->setCostIdleTimeUnit(0.0);
        Resource_1->setCostPerUse(0.0);
        
	// initialize model parts
        // Create "Contract Arrives"
	Create* Create_2 = plugins->newInstance<Create>(model, "Create an Entity");
        Create_2->setEntityTypeName("Entity 1");
	Create_2->setTimeBetweenCreationsExpression("expo(5)", Util::TimeUnit::minute);
	Create_2->setEntitiesPerCreation(1);
        Create_2->setFirstCreation(0.0);
 
        // Process
        Process* Process_3 =  plugins->newInstance<Process>(model, "Process with Resource 1");
        Process_3->getSeizeRequests()->insert(new SeizableItem(Resource_1));
	Process_3->setQueueableItem(new QueueableItem(model, "Process with Resource 1 Queue")); // ??
	Process_3->setDelayExpression("tria(5,6,7)");
        Process_3->setDelayTimeUnit(Util::TimeUnit::minute);
        Process_3->setAllocationType(Util::AllocationType::ValueAdded);
        
        // process 4
        Delay* delay1 = plugins->newInstance<Delay>(model); // the default delay time is 1.0 s
	delay1->setDelayExpression("tria(0.5,1,1.5)");
        
        // Dispose
        Dispose* Dispose_1 = plugins->newInstance<Dispose>(model, "DisposeOfEntity");
         
	// connect model components
        Create_2->getConnections()->insert(Process_3);
        Process_3->getConnections()->insert(delay1);
        delay1->getConnections()->insert(Dispose_1);
	
        // set simulation parameters
	ModelSimulation* sim = model->getSimulation();
        model->getSimulation()->setReplicationLength(1000, Util::TimeUnit::minute);
        sim->setWarmUpPeriod(50);
	sim->setWarmUpPeriodTimeUnit(Util::TimeUnit::minute);
	sim->setNumberOfReplications(300);
	model->getSimulation()->setTerminatingCondition("count(DisposeOfEntity.CountNumberIn)>1000");
	model->save("./models/Smart_InventoryAndHoldingCosts.gen");
	model->getSimulation()->start();
	// run the simulation
        model->check();
        model->getDataManager()->show();
	sim->start();
	for (int i = 0; i < 1e9; i++); // give UI some time to finish std::cout
	// free memory
	delete genesys;
	
	return 0;
}
